#!/bin/bash
#
# grepper
#
# TODO 圧縮ファイル/バイナリファイル
# TODO ファイルリストが遅い
# TODO 出力入れ替え
function private.print_usage() {
cat << __EOF__ >&2
usage: $(basename $0) [-h -c -v -q -l -ic]
                      [-fm|--filemtime +n | n | -n] [-fmm|--filemmin +n | n | -n]
                      [-fi|--fileignore expression] [-fe|--fileexpression expression] 
                      [-fn|--filename name] [-fs|--filesuffix suffix]
                      [-i|--ignore expression] [-e|--expression expression] path...
parameters:
  [options]
  -h|--help                    usageを表示する
  -c|--color                   標準出力時も検索結果に色をつける
  -v|--verbose                 冗長出力する
  -q|--quiet                   出力しない
  -l|--link                    シンボリックリンクを対象にする
  -ic|--ignorecase             大文字小文字を区別しない
  -esc|--escapecsv             csvファイルをエスケープする
  [file path search options]
  -fm|--filemtime              +n日以前に更新された|n日前に更新された|-n日前までに更新された
  -fmm|--filemmin              +n分以前に更新された|n分前に更新された|-n分前までに更新された
  -fi|--fileignore             無視（正規表現）             \|=or
  -fe|--fileexpression         検索（正規表現）             \,=and \|=or
  -fif|--fileignorefixed       無視（正規表現なし）         \|=or
  -fef|--fileexpressionfixed   検索（正規表現なし）         \,=and \|=or
  -fn|--filename               ファイル名(ワイルドカード)   \|=or
  -fs|--filesuffix             ファイルのサフィックス       \|=or
  [file content search options]
  -i|--ignore                  無視（正規表現）             \|=or
  -e|--expression              検索（正規表現）             \,=and \|=or
  -if|--ignorefixed            無視（正規表現なし）         \|=or
  -ef|--expressionfixed        検索（正規表現なし）         \,=and \|=or
  [target]
  path                        検索対象パス                  \|=or
return:
  0: hit 検索hitした
  3: miss 検索hitしなかった
  6: error エラーが発生した
examples:
  grepper -v -fi "\.git\|/target/\|\.DS_Store" -fe "\.sh$" -e export .
__EOF__
}
function private.escape() {
  TARGET="$1"
  # 終端のバックスラッシュが存在する場合
  echo "${TARGET}" | grep -q '\\$'
  if [ $? -eq 0 ]; then
    # rev で逆順にして、終端からの最長マッチをする
    COUNT=$(echo "${TARGET}" | rev | sed -e 's/^\(\\\\*\).*$/\1/' | tr -d '\n' | wc -c | sed 's/ //g')
    # 奇数の場合は偶数にする
    if [ ${COUNT} -ne 0 -a $(expr ${COUNT} % 2) -eq 1 ]; then
      TARGET=$(echo "$TARGET" | sed 's/\\$/\\\\/')
    fi 
  fi
  # シングルクォートをエスケープする
  TARGET=$(echo "${TARGET}" | sed -e "s/'/'\\\''/g")
  # シングルクォートで全体をエスケープする
  echo "${TARGET}" | sed -e "s/^/'/" -e "s/$/'/"
}
function private.escape_regex() {
  TARGET="$1"
  # .^$|\[]
  # メタ文字が存在する場合
  echo "${TARGET}" | grep -q -e '[\.^$]' -e '\[' -e '\]'
  if [ $? -eq 0 ]; then
    # メタ文字をエスケープする
    TARGET=$(echo "${TARGET}" | sed -e 's/\([.^$|\\()]\)/\\\1/g' -e 's/\(\[\)/\\\1/g' -e 's/\(\]\)/\\\1/g')
  fi
  echo "${TARGET}"
}
function private.create_ignore_grep_command() {
  CONDITION="$1"
  FILTER_COMMAND=""
  if [ "${CONDITION}" != "" ]; then
    for CONDITION_WORD in $(echo "${CONDITION}" | sed "s/[\]|/${DELIM}/g"); do
      if [ "$(echo ${CONDITION_WORD} | cut -c1)" = ${FIXED_COMMAND} ]; then
        CONDITION_WORD="$(echo ${CONDITION_WORD} | cut -c2-)"
        CONDITION_WORD=$(private.escape_regex "${CONDITION_WORD}")
      fi
      FILTER_COMMAND="${FILTER_COMMAND} | grep ${IGNORE_CASE} -v "$(private.escape "${CONDITION_WORD}")
    done
  fi
  echo ${FILTER_COMMAND}
}
function private.create_contents_ignore_grep_command() {
  CONDITION="$1"
  FILTER_COMMAND=""
  if [ "${CONDITION}" != "" ]; then
    for CONDITION_WORD in $(echo "${CONDITION}" | sed "s/[\]|/${DELIM}/g"); do
      if [ "$(echo ${CONDITION_WORD} | cut -c1)" = ${FIXED_COMMAND} ]; then
        CONDITION_WORD="$(echo ${CONDITION_WORD} | cut -c2-)"
        CONDITION_WORD=$(private.escape_regex "${CONDITION_WORD}")
      fi
      FILTER_COMMAND="${FILTER_COMMAND} | grep ${IGNORE_CASE} -v "$(private.escape "^[0-9][0-9]*:.*${CONDITION_WORD}")
    done
  fi
  echo ${FILTER_COMMAND}
}
function private.create_grep_command() {
  CONDITION="$1"
  GREP_ADDITIONAL_OPT="$2"
  FILTER_COMMAND=""
  if [ "${CONDITION}" != "" ]; then
    for CONDITION_WORD in $(echo "${CONDITION}" | sed -e "s/[\],/${DELIM}/g"); do
      echo "${CONDITION_WORD}" | grep -q "[\]|"
      if [ $? -eq 0 ]; then
        GREP_OPT=""
        IS_FIXED=
        if [ "$(echo ${CONDITION_WORD} | cut -c1)" = ${FIXED_COMMAND} ]; then
          CONDITION_WORD="$(echo ${CONDITION_WORD} | cut -c2-)"
          IS_FIXED=true
        fi
        for OR in $(echo "${CONDITION_WORD}" | sed -e "s/[\]|/${DELIM}/g"); do
          if [ "${IS_FIXED}" = "true" ]; then
            OR=$(private.escape_regex "${OR}")
          fi
          GREP_OPT="${GREP_OPT} -e "$(private.escape "${OR}")
        done
        FILTER_COMMAND="${FILTER_COMMAND} | grep ${IGNORE_CASE} ${GREP_ADDITIONAL_OPT} ${GREP_OPT}"
      else
        if [ "$(echo ${CONDITION_WORD} | cut -c1)" = ${FIXED_COMMAND} ]; then
          CONDITION_WORD="$(echo ${CONDITION_WORD} | cut -c2-)"
          CONDITION_WORD=$(private.escape_regex "${CONDITION_WORD}")
        fi
        FILTER_COMMAND="${FILTER_COMMAND} | grep ${IGNORE_CASE} ${GREP_ADDITIONAL_OPT} "$(private.escape "${CONDITION_WORD}")
      fi
    done
  fi
  echo ${FILTER_COMMAND}
}
function private.create_contents_grep_command() {
  CONDITION="$1"
  GREP_OPT=""
  FILTER_COMMAND=""
  if [ "${CONDITION}" != "" ]; then
    for CONDITION_WORD in $(echo "${CONDITION}" | sed "s/[\],/${DELIM}/g"); do
      echo "${CONDITION_WORD}" | grep -q "[\]|"
      if [ $? -eq 0 ]; then
        GREP_OPT=""
        IS_FIXED=
        if [ "$(echo ${CONDITION_WORD} | cut -c1)" = ${FIXED_COMMAND} ]; then
          CONDITION_WORD="$(echo ${CONDITION_WORD} | cut -c2-)"
          IS_FIXED=true
        fi
        for OR in $(echo "${CONDITION_WORD}" | sed "s/[\]|/${DELIM}/g"); do
          if [ "${IS_FIXED}" = "true" ]; then
            OR=$(private.escape_regex "${OR}")
          fi
          GREP_OPT="${GREP_OPT} -e "$(private.escape "^[0-9][0-9]*:.*${OR}")
        done
        FILTER_COMMAND="${FILTER_COMMAND} | grep ${IGNORE_CASE} ${GREP_OPT}"
      else
        if [ "$(echo ${CONDITION_WORD} | cut -c1)" = ${FIXED_COMMAND} ]; then
          CONDITION_WORD="$(echo ${CONDITION_WORD} | cut -c2-)"
          CONDITION_WORD=$(private.escape_regex "${CONDITION_WORD}")
        fi
        FILTER_COMMAND="${FILTER_COMMAND} | grep ${IGNORE_CASE} "$(private.escape "^[0-9][0-9]*:.*${CONDITION_WORD}")
      fi
    done
  fi
  echo ${FILTER_COMMAND}
}
function private.output_path_info() {
  COLOR_FILE=""
  COLOR_TIME=""
  COLOR_SIZE=""
  COLOR_USER=""
  COLOR_PERM=""
  COLOR_END=""
  if [ "${2}" != "" ]; then
    COLOR_FILE=$(echo -e '\033[32m')
    COLOR_TIME=$(echo -e '\033[33m')
    COLOR_SIZE=$(echo -e '\033[34m')
    COLOR_USER=$(echo -e '\033[35m')
    COLOR_PERM=$(echo -e '\033[36m')
    COLOR_END=$(echo -e '\033[0m')
  fi
  FILE_TIME=$(date -r "${1}" '+%Y/%m/%d %H:%M:%S')
  if [ $(uname) = "Darwin" ]; then
    # Mac
    # 1            2 3          4      5      6 7  8     9
    # -rwxr-xr-x   1 saitout34  staff  11266  3 22 13:40 grepper
    ls -al "${1}" | sed 's#^\([^ ]*\) *[^ ]* *\([^ ]*\) *[^ ]* *\([^ ]*\) *[^ ]* *[^ ]* *[^ ]* *\([^ ]*\).*$#'${COLOR_FILE}'\4'${COLOR_END}','"${COLOR_TIME}${FILE_TIME}${COLOR_END}"','${COLOR_SIZE}'\3'${COLOR_END}','${COLOR_USER}'\2'${COLOR_END}','${COLOR_PERM}'\1'${COLOR_END}'#'
  else
    # Linux
    # 1          2 3    4     5      6   7  8     9    10
    # -rwxr-xr-x 1 cdfw build 11631  3月 22 13:51 2019 grepper
    ls -al "${1}" | sed 's#^\([^ ]*\) *[^ ]* *\([^ ]*\) *[^ ]* *\([^ ]*\) *[^ ]* *[^ ]* *[^ ]* *[^ ]* *\([^ ]*\).*$#'${COLOR_FILE}'\4'${COLOR_END}','"${COLOR_TIME}${FILE_TIME}${COLOR_END}"','${COLOR_SIZE}'\3'${COLOR_END}','${COLOR_USER}'\2'${COLOR_END}','${COLOR_PERM}'\1'${COLOR_END}'#'
  fi
}
function private.output_file_info() {
  COLOR_FILE=""
  COLOR_LINE=""
  COLOR_END=""
  if [ "${3}" != "" ]; then
    COLOR_FILE=$(echo -e '\033[32m')
    COLOR_LINE=$(echo -e '\033[34m')
    COLOR_END=$(echo -e '\033[0m')
  fi
  if [ "${ESCAPE_CSV}" = "true" ]; then
    cat "${2}" | sed -e 's/"/""/g' -e 's#^\([^:]*\):\(.*\)$#'${COLOR_FILE}${1}${COLOR_END}','${COLOR_LINE}'\1'${COLOR_END}',"\2"#g'
  else
    cat "${2}" | sed -e 's#^\([^:]*\):\(.*\)$#'${COLOR_FILE}${1}${COLOR_END}','${COLOR_LINE}'\1'${COLOR_END}',\2#g'
  fi
}
function private.left() {
  COUNT=$(echo -n "${1}" | wc -c | sed 's/ //g' | tr -d '\n')
  if [ ${COUNT} -gt ${2} ]; then
    CUT_OPT=$(printf " -c%d-" $(expr ${COUNT} - ${2} + 1) | sed 's/ //g')
    printf "%-${2}.${2}s" $(echo "${1}" | cut ${CUT_OPT})
  else
    printf "%-${2}.${2}s" "${1}"
  fi
}
function private.console() {
  if [ "${QUIET}" != "true" -a "${VERBOSE}" = "true" ]; then
    echo "$@" >&2
  fi
}
function private.console_printf() {
  if [ "${QUIET}" != "true" -a "${VERBOSE}" = "true" ]; then
    LINE=$(printf "$@")
    echo -en "${LINE}" >&2
  fi
}
function private.console_error() {
  echo "$@" >&2
}
function private.is_numeric() {
  echo "$1" | grep -q -e "^[+-][0-9][0-9]*$" -e "^[0-9][0-9]*$"
  if [ $? -eq 0 ]; then
    echo "true"
  else
    echo "false"
  fi
}
FIXED_COMMAND=$(echo -e "\a")
# 空白が除去されないように、IFSを \v[垂直タブ]にする
DELIM=$(echo -e "\v\n")
IFS="${DELIM}"
# Conditions
IGNORE_FILE=""
MATCH_FILE=""
IGNORE_IN_FILE=""
MATCH_IN_FILE=""
FIND_PATHS=""
FILE_NAME=""
FILE_TIME=""
GREP_COLOR=""
# stdoutが端末かどうか判定
if [ -t 1 ]; then
  GREP_COLOR="--color=always"
fi
# 引数解析
while [ $# -gt 0 ]; do
  case "$1" in
  # [file path options]
  -fm|--filemtime)
    shift
    if [ $(private.is_numeric "${1}") != "true" ]; then
      private.print_usage
      private.console_error "数値を指定してください。[$1]"
      exit 6
    fi
    FILE_TIME=" -mtime ${1}"
    shift
    ;;
  -fmm|--filemmin)
    shift
    if [ $(private.is_numeric "${1}") != "true" ]; then
      private.print_usage
      private.console_error "数値を指定してください。[$1]"
      exit 6
    fi
    FILE_TIME=" -mmin ${1}"
    shift
    ;;
  -fi|--fileignore)
    shift
    SEP=""
    # その他の場合
    if [ "${IGNORE_FILE}" != "" ]; then
      SEP="\\|"
    fi
    IGNORE_FILE="${IGNORE_FILE}${SEP}$1"
    shift
    ;;
  -fif|--fileignorefixed)
    shift
    SEP=""
    # その他の場合
    if [ "${IGNORE_FILE}" != "" ]; then
      SEP="\\|"
    fi
    IGNORE_FILE="${IGNORE_FILE}${SEP}${FIXED_COMMAND}$1"
    shift
    ;;
  -fe|--fileexpression)
    shift
    SEP=""
    if [ "${MATCH_FILE}" != "" ]; then
      SEP="\\,"
    fi
    MATCH_FILE="${MATCH_FILE}${SEP}$1"
    shift
    ;;
  -fef|--fileexpressionfixed)
    shift
    SEP=""
    if [ "${MATCH_FILE}" != "" ]; then
      SEP="\\,"
    fi
    MATCH_FILE="${MATCH_FILE}${SEP}${FIXED_COMMAND}$1"
    shift
    ;;
  -fn|--filename)
    shift
    SEP=" "
    if [ "${FILE_NAME}" != "" ]; then
      SEP=" -o "
    fi
    FILE_NAME="${FILE_NAME}${SEP}-name '$1'"
    shift
    ;;
  -fs|--filesuffix)
    shift
    SEP=""
    if [ "${MATCH_FILE}" != "" ]; then
      SEP="\\|"
    fi
    MATCH_FILE="${MATCH_FILE}${SEP}"$(echo "$1" | sed 's#|#$|#g')"\$"
    shift
    ;;
  # [file content options]
  -i|--ignore)
    shift
    SEP=""
    # その他の場合
    if [ "${IGNORE_IN_FILE}" != "" ]; then
      SEP="\\|"
    fi
    IGNORE_IN_FILE="${IGNORE_IN_FILE}${SEP}$1"
    shift
    ;;
  -if|--ignorefixed)
    shift
    SEP=""
    # その他の場合
    if [ "${IGNORE_IN_FILE}" != "" ]; then
      SEP="\\|"
    fi
    IGNORE_IN_FILE="${IGNORE_IN_FILE}${SEP}${FIXED_COMMAND}$1"
    shift
    ;;
  -e|--expression)
    shift
    SEP=""
    # その他の場合
    if [ "${MATCH_IN_FILE}" != "" ]; then
      SEP="\\,"
    fi
    MATCH_IN_FILE="${MATCH_IN_FILE}${SEP}$1"
    shift
    ;;
  -ef|--expressionfixed)
    shift
    SEP=""
    # その他の場合
    if [ "${MATCH_IN_FILE}" != "" ]; then
      SEP="\\,"
    fi
    MATCH_IN_FILE="${MATCH_IN_FILE}${SEP}${FIXED_COMMAND}$1"
    shift
    ;;
  -c|--color)
    GREP_COLOR="--color=always"
    shift
    ;;
  -v|--verbose)
    export VERBOSE="true"
    shift
    ;;
  -ic|--ignorecase)
    export IGNORE_CASE="--ignore-case"
    shift
    ;;
  -l|--link)
    if [ $(uname) = "Darwin" ]; then
      FOLLOW_SYMLINK=" -L"
    else
      FOLLOW_SYMLINK=" -follow"
    fi
    shift
    ;;
  -q|--quiet)
    export QUIET=true
    shift
    ;;
  -esc|--escapecsv)
    export ESCAPE_CSV=true
    shift
    ;;
  -h|--help)
    private.print_usage
    exit 6
    ;;
  *)
    SEP=""
    # その他の場合
    if [ "${FIND_PATHS}" != "" ]; then
      SEP="\\|"
    fi
    FIND_PATHS="${FIND_PATHS}${SEP}$1"
    shift
  esac
done
if [ "${FIND_PATHS}" = "" ]; then
  private.print_usage
  exit 6
fi
for FIND_PATH in $(echo ${FIND_PATHS} | sed "s/[\]|/${DELIM}/g"); do
  if [ ! -d "${FIND_PATH}" ]; then
    private.print_usage
    private.console_error "ディレクトリが存在しません。[${FIND_PATH}]"
    exit 6
  fi
done
# 中間ファイル
OUTPUT_PATH_LIST=/tmp/grepper.list.$$
OUTPUT_PATH_FILE=/tmp/grepper.path.$$.csv
OUTPUT_FILE=/tmp/grepper.file.$$.csv
TMP_FILE=/tmp/grepper.tmp.$$
TMP_FILE_1=/tmp/grepper.tmp1.$$
TMP_FILE_2=/tmp/grepper.tmp2.$$
# 初期化
cat /dev/null > ${OUTPUT_PATH_FILE}
cat /dev/null > ${OUTPUT_FILE}
# 処理終了時に削除
trap "if [ -f ${OUTPUT_PATH_LIST} ]; then rm ${OUTPUT_PATH_LIST}; fi; \
      if [ -f ${OUTPUT_PATH_FILE} ]; then rm ${OUTPUT_PATH_FILE}; fi; \
      if [ -f ${OUTPUT_FILE} ]; then rm ${OUTPUT_FILE}; fi; \
      if [ -f ${TMP_FILE_1} ]; then rm ${TMP_FILE_1}; fi; \
      if [ -f ${TMP_FILE_2} ]; then rm ${TMP_FILE_2}; fi; \
      if [ -f ${TMP_FILE} ]; then rm ${TMP_FILE}; fi" EXIT
# FINDコマンドの組み立て
SEARCH_COMMAND="find ${FOLLOW_SYMLINK} $(echo ${FIND_PATHS} | sed 's/[\]|/ /g') -type f ${FILE_NAME}${FILE_TIME}"
# ファイル名フィルタコマンドの作成
FILTER_COMMAND=$(private.create_ignore_grep_command "${IGNORE_FILE}")
FILTER_COMMAND="${FILTER_COMMAND}"$(private.create_grep_command "${MATCH_FILE}")
# 生成したコマンドを元に、ファイル内を検索する
COMMAND="${SEARCH_COMMAND} ${FILTER_COMMAND}"
# 行番号を考慮したファイル内検索コマンド生成
FILTER_IN_FILE_COMMAND=$(private.create_contents_ignore_grep_command "${IGNORE_IN_FILE}")
FILTER_IN_FILE_COMMAND=${FILTER_IN_FILE_COMMAND}$(private.create_contents_grep_command "${MATCH_IN_FILE}")
FILTER_COLOR_COMMAND=$(private.create_grep_command "${MATCH_IN_FILE}" "${GREP_COLOR}")
private.console "== params ================================================================="
private.console "検索対象パス　　　　　: ${FIND_PATHS}"
private.console "対象日時              : ${FILE_TIME}"
private.console "ファイル名            : ${FILE_NAME}"
private.console "ファイル名除外パターン: ${IGNORE_FILE}"
private.console "ファイル名検索パターン: ${MATCH_FILE}"
private.console "ファイル内除外パターン: ${IGNORE_IN_FILE}"
private.console "ファイル内検索パターン: ${MATCH_IN_FILE}"
private.console "== command ================================================================"
private.console "ファイル名検索コマンド: ${COMMAND}"
private.console "ファイル内検索コマンド: ${FILTER_COLOR_COMMAND}"
private.console "==========================================================================="
# フィルタの動作確認
if [ "${FILTER_IN_FILE_COMMAND}" != "" ]; then
  (eval cat /dev/null ${FILTER_IN_FILE_COMMAND}) > /dev/null
  if [ \( $? -ne 0 \) -a \( $? -ne 1 \) ]; then
    private.console_error "検索条件でエラーが発生しました。"
    exit 6
  fi
fi
# 対象ファイルの検索
( eval ${COMMAND} ) > ${OUTPUT_PATH_LIST}
if [ \( $? -ne 0 \) -a \( $? -ne 1 \) ]; then
  private.console_error "ファイル検索に失敗しました。"
  exit 6
fi
FILE_COUNT=0
FILES_COUNT=$(cat ${OUTPUT_PATH_LIST} | wc -l | sed 's/ //g')
# 戻り値設定
RETCODE_PATH=3
RETCODE_FILE=3
# 検索されたファイルごとにファイル内を検索
for FILE in $(cat ${OUTPUT_PATH_LIST} | tr "\n" "${DELIM}"); do
  # パス検索結果が存在する
  RETCODE_PATH=0
  FILE=$(cd $(dirname "${FILE}");pwd)/$(basename ${FILE})
  # 状況表示
  FILE_COUNT=$(expr ${FILE_COUNT} + 1)
  private.console_printf " %05d/%05d - %s\r" ${FILE_COUNT} ${FILES_COUNT} "$(private.left ${FILE} 60)"
  if [ "${FILTER_IN_FILE_COMMAND}" != "" ]; then
    # ファイル内検索コマンドが指定されている場合
    FILE_INFO=$(file -b --mime-type "${FILE}" | sed 's/ //g')
    case "${FILE_INFO}" in
    text/*)
      ;;
    application/xml)
      ;;
    *)
      echo "[skip] ${FILE_INFO} - ${FILE}" >&2
      continue
      ;;
    esac
    # 行番号付きで検索した結果をフィルタする
    ( eval "cat '${FILE}' | grep -n '.*' ${FILTER_IN_FILE_COMMAND}" ) > ${TMP_FILE}
    COUNT=$(cat ${TMP_FILE} | wc -l | sed 's/ //g')
    if [ ${COUNT} -ne 0 ]; then
      # ファイル検索結果が存在する
      RETCODE_FILE=0
      # ファイルを分解して色付け
      if [ "${GREP_COLOR}" != "" ]; then
        # 行番号に色がつかないよう分解する
        sed 's#^\([^:]*\):.*$#\1#' ${TMP_FILE} > ${TMP_FILE_1}
        ( eval "sed 's#^[^:]*:\(.*\)\$#\1#' '${TMP_FILE}' ${FILTER_COLOR_COMMAND}" ) > ${TMP_FILE_2}
        if [ $(cat ${TMP_FILE_1} | wc -l | sed 's/ //g') = $(cat ${TMP_FILE_2} | wc -l | sed 's/ //g') ]; then
          paste -d: ${TMP_FILE_1} ${TMP_FILE_2} > ${TMP_FILE}
        else
          # FIXME grep --color=always -e OR -e OR の場合、segfaultで落ちる...
          private.console_error "色付けに失敗[${FILE}]"
        fi
      fi
      # 検索条件に該当する行あり
      private.output_file_info "${FILE}" "${TMP_FILE}" "${GREP_COLOR}" >> ${OUTPUT_FILE}
    fi
  else
    # ファイル内検索なし
    private.output_path_info "${FILE}" "${GREP_COLOR}" >> ${OUTPUT_PATH_FILE}
  fi
done
# 結果表示
private.console
if [ "${FILTER_IN_FILE_COMMAND}" = "" ]; then
  private.console "== path ==================================================================="
  if [ "${QUIET}" != "true" ]; then
    cat ${OUTPUT_PATH_FILE}
  fi
  RETCODE=${RETCODE_PATH}
  HIT_COUNT=$(cat ${OUTPUT_PATH_FILE} | wc -l | sed 's/ //g') 
else
  private.console "== file ==================================================================="
  if [ "${QUIET}" != "true" ]; then
    cat ${OUTPUT_FILE}
  fi
  RETCODE=${RETCODE_FILE}
  HIT_COUNT=$(cat ${OUTPUT_FILE} | wc -l | sed 's/ //g') 
fi
private.console "== summary ================================================================"
private.console "該当件数: "${HIT_COUNT}
private.console "==========================================================================="
exit ${RETCODE}
